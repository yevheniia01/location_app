{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yevheniia\\\\Documents\\\\Github_codes\\\\location_app_test\\\\my-app\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { setStatusBarHidden, StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Button from \"./components/Button\";\nimport List from \"./components/List\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as Location from 'expo-location';\nimport { initializeApp } from \"firebase/app\";\nimport firebase from 'firebase';\nimport MapView, { PROVIDER_GOOGLE } from 'react-native-maps';\nexport default function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      locationLat = _useState2[0],\n      setLocationLat = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      locationLong = _useState4[0],\n      setLocationLong = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      errorMsg = _useState6[0],\n      setErrorMsg = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      address = _useState8[0],\n      setAddress = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      clicked = _useState10[0],\n      setClicked = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      lastLocation = _useState12[0],\n      setLastLocation = _useState12[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location, result;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 7;\n                break;\n              }\n\n              setErrorMsg('Permission to access location was denied');\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 9:\n              location = _context.sent;\n              setLocationLat(location.coords.latitude);\n              setLocationLong(location.coords.longitude);\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(fetch('https://httpbin.org/post', {\n                method: 'post',\n                mode: 'no-cors',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-type': 'application/json'\n                },\n                body: JSON.stringify(location)\n              }));\n\n            case 14:\n              result = _context.sent;\n              console.log(result);\n              console.log(location.coords);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  var text = 'Waiting..';\n\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    setAddress: setAddress,\n    address: address,\n    setLastLocation: setLastLocation,\n    locationLat: locationLat,\n    locationLong: locationLong,\n    location: location,\n    setClicked: setClicked,\n    clicked: clicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }), React.createElement(List, {\n    clicked: clicked,\n    lastLocation: lastLocation,\n    address: address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, \"Open up App.js to start working on your app!\"), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, \"Open up App.js to start working on your app!\"), React.createElement(MapView, {\n    style: {\n      flex: 1\n    },\n    provider: PROVIDER_GOOGLE,\n    showsUserLocation: true,\n    initialRegion: {\n      latitude: 37.78825,\n      longitude: -122.4324,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }), console.log(lastLocation), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, \"Open up App.js to start working on your app!\"), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/Yevheniia/Documents/Github_codes/location_app_test/my-app/App.js"],"names":["setStatusBarHidden","StatusBar","React","useState","useEffect","Button","List","Location","initializeApp","firebase","MapView","PROVIDER_GOOGLE","App","locationLat","setLocationLat","locationLong","setLocationLong","errorMsg","setErrorMsg","address","setAddress","clicked","setClicked","lastLocation","setLastLocation","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","location","coords","latitude","longitude","fetch","method","mode","headers","body","JSON","stringify","result","console","log","text","styles","container","flex","latitudeDelta","longitudeDelta","StyleSheet","create","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { setStatusBarHidden, StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Button from './components/Button';\nimport List from './components/List';\nimport { Platform, Text, View, StyleSheet } from 'react-native';\nimport * as Location from 'expo-location';\nimport { initializeApp } from \"firebase/app\";\nimport firebase from 'firebase';\nimport MapView, { PROVIDER_GOOGLE } from 'react-native-maps';\n\n\n\nexport default function App() {\n\n  const [locationLat, setLocationLat] = useState(null);\n  const [locationLong, setLocationLong] = useState(null)\n  const [errorMsg, setErrorMsg] = useState(null);\n  const [address, setAddress] = useState('');\n  const [clicked, setClicked] = useState(false);\n  const [lastLocation, setLastLocation] = useState([])\n\n  // const firebaseConfig = {\n  //   apiKey: \"AIzaSyBw0JiynMCdwmvU4R9HuB6mCOXCmwR8H0E\",\n  //   authDomain: \"locationapp-3efcb.firebaseapp.com\",\n  //   projectId: \"locationapp-3efcb\",\n  //   storageBucket: \"locationapp-3efcb.appspot.com\",\n  //   messagingSenderId: \"1020753340007\",\n  //   appId: \"1:1020753340007:web:31d1eeac64004d46bdd6c2\"\n  // };\n  \n  // // Initialize Firebase\n  // if (!firebase.apps.length) {\n  // firebase.initializeApp(firebaseConfig);\n  // }\n  //  var db = firebase.firestore();\n  \n  // let fireAddress = db.collection(\"test\").doc(\"locWaWWxNtucZmAIU5py\")\n\n  \n  useEffect(() => {\n    (async () => {\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMsg('Permission to access location was denied');\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({});\n      setLocationLat(location.coords.latitude);\n      setLocationLong(location.coords.longitude);\n      \n    \n       \n      let result = await fetch('https://httpbin.org/post', {\n          method: 'post',\n          mode: 'no-cors',\n          headers: {\n            'Accept': 'application/json',\n            'Content-type': 'application/json'\n          },\n          body: JSON.stringify(location)\n          \n      })\n      \n      \n  \n      console.log(result)\n      console.log(location.coords)\n    })();\n  }, []);\n\n  \n\n  let text = 'Waiting..';\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  \n//   var randoms = ['Yes', 'No', 'Maybe', 'random'];\n\n//   function showLocation(){\n//     fetch('https://maps.googleapis.com/maps/api/geocode/json?address=' + locationLat + ',' + locationLong + '&key=' + 'AIzaSyANgMRwJSiVKGPdjshbjuavIYRuOg7dKvQ ')\n//      .then((response) => response.json())\n//      .then((responseJson) => {\n//       var random = randoms[Math.floor(Math.random() * randoms.length)];\n//       setAddress(responseJson.results[0].formatted_address + random)\n//       setClicked(true)\n//        console.log(address)\n      \n//    })\n//    fireAddress.set({\n//     location: address \n//   })\n//   .then(() => {\n//     console.log(\"Document successfully written!\");\n//   })\n//   .catch((error) => {\n//     console.error(\"Error writing document: \", error);\n//   });\n  \n//   fireAddress.update({\n//     location: firebase.firestore.FieldValue.arrayUnion(address)\n// })\n// .then(() => {\n//   console.log(\"Document successfully updated!\");\n// })\n// .catch((error) => {\n//   console.error(\"Error writing document: \", error);\n// });\n// let coll = db.collection(\"test\")\n// .get()\n//     .then((querySnapshot) => {\n//         querySnapshot.forEach((doc) => {\n//             // doc.data() is never undefined for query doc snapshots\n//             console.log(doc.id, \" => \", doc.data().location);\n//             setLastLocation(doc.data().location)\n//             console.log(lastLocation)\n//         });\n//     })\n//     .catch((error) => {\n//         console.log(\"Error getting documents: \", error);\n//     });\n// console.log(coll)\n\n//    }\n\n   \n\n\n\n\n\n  return (\n    <View style={styles.container}>\n      <Button setAddress={setAddress} \n              address={address}\n              setLastLocation= {setLastLocation}\n              locationLat={locationLat}\n              locationLong={locationLong}\n              location ={location}\n              setClicked = {setClicked}\n              clicked = {clicked} />\n      <List clicked = {clicked} \n            lastLocation = {lastLocation}\n            address = { address }/>\n            \n      <Text>Open up App.js to start working on your app!</Text>\n      <Text>Open up App.js to start working on your app!</Text>\n      <MapView\n\nstyle={{ flex: 1 }}\n\nprovider={PROVIDER_GOOGLE}\n\nshowsUserLocation\n\ninitialRegion={{\n\nlatitude: 37.78825,\n\nlongitude: -122.4324,\n\nlatitudeDelta: 0.0922,\n\nlongitudeDelta: 0.0421}}\n\n/>\n      {/* <button onClick={showLocation}>Show my location</button> */}\n      {console.log(lastLocation)}\n      {/* {clicked == true ?\n       <p>You are located at: {address}</p> :null}\n      {lastLocation.map((item) =>{\n        \n      return(<View>\n      <Text> Your last location: {item}</Text>\n      \n      </View>\n      )\n    })} */}\n      \n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}